clear all;

loc_build( 'loc_api.cpp' );
loc_build( 'loc_opcodes.cpp' );

%%

op_create = uint32(0);
op_destroy = uint32(1);
op_add_cat = uint32(2);
op_set_cat = uint32(3);
op_get_cats = uint32(4);
op_get_labs = uint32(5);
op_find = uint32(6);
op_has_cat = uint32(7);

%%  create

tic;
loc = loc_create();
toc;

cat = uint32(100);

%%  destroy

loc_destroy();

%%  add category

tic;

loc_addcat( loc, uint32(cat:cat+1e4) );

cat = cat + 1;

toc;


%%  get categories / has categories

tic;
cats = locator_api( op_get_cats, loc );
toc;

tic;
exists = locator_api( op_has_cat, loc, cats );
toc;

%%  get labels

tic;
labs = locator_api( op_get_labs, loc );
toc;


%%  set category

tic;

for i = 1:1e3
    
sz = 1e5;
c_cat = uint32(cat-1);
label = uint32(i);
rows = uint32(sz);
% assign_at = uint32(1:sz-1)';
assign_at = uint32( randperm(sz, floor(sz / 2)) );
% assign_at = uint32( 1 );

locator_api( op_set_cat, loc, c_cat, label, assign_at, rows );

end

toc;

% %%  find

tic;
inds = locator_api( op_find, loc, label );
toc;

assert( numel(inds) == numel(assign_at) );

%%

n_iters = 1e5;

tic;

for i = 1:n_iters
  s = locator.op_codes( 'create' );
end

toc;

%%

tic;

for i = 1:n_iters
  y = loc_opcodes( 'create' );
end

toc;
